<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron_school | The Flatiron Experience]]></title>
  <link href="http://mbukantz.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://mbukantz.github.io/"/>
  <updated>2015-11-14T12:33:49-05:00</updated>
  <id>http://mbukantz.github.io/</id>
  <author>
    <name><![CDATA[Michael Bukantz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime 201]]></title>
    <link href="http://mbukantz.github.io/blog/2015/11/12/advanced-sublime/"/>
    <updated>2015-11-12T20:39:08-05:00</updated>
    <id>http://mbukantz.github.io/blog/2015/11/12/advanced-sublime</id>
    <content type="html"><![CDATA[<p>In our second week at Flatiron School, Jeff <a href="http://jeffslutzky.github.io/blog/2015/10/04/sublime-hints-and-shortcuts/">blogged</a> some cool tips and tricks about using Sublime text editor.  Austin also <a href="http://gilmoursa.github.io/blog/Package%20Control/">blogged</a> about using Package Control to enhance the Sublime experience.  After using Sublime for a couple of months and doing some thorough research, I wanted to share a second edition of useful Sublime hints, shortcuts, and packages.</p>




<h3>Selectors</h3>




<p>You can select a single line of text by clicking and dragging with your trackpad, and you can do the same for multiple snippets of text by holding down your command key.  However, there are several shortcuts that Sublime provides us to more efficiently select text.  Here are a few examples:</p>


<p>  <ul>
    <li>Command + D - Select a single word or select the next instance of the word</li>
    <li>Command + L - Select the line that you are on</li>
    <li>Command + Control + M - Select anything within the brackets</li>
    <li>Command + Control + G - Select any instance of the highlighted text</li>
  </ul><br></p>

<h3>Command Palette</h3>




<p>If you press Command + Shift + P in Sublime, it will open up the Command Palette.  The Command Palette will allow you to do many tasks such as installing packages, renaming a file, or saving all files.  With its easy to use search bar, the Command Palette is a great tool for developers.  Here is a snapshot of how to search for installing new packages:</p>


<p><img src="../images/install_packages.png"><br><br></p>

<h3>Advanced New File (Package Control)</h3>




<p>Speaking of package control, there is a neat package that allows you to create new files straight from Sublime.  As opposed to going to terminal to "touch" a new file, you can download the "Advanced New File" package from the Command Palette.  By clicking Command + Option + n, you can enter a new file name and/or path from the bottom of Sublime.</p>


<p><br></p>

<h3>Spell Checker</h3>


<p>  <p>While I was writing this blog post, I was catching spelling errors left and right.  After a quick Google search, I discovered that you can enable spell check within Sublime.  In order to add spell checker when writing a blog post or another text-heavy document, you can append spell checker to the user preferences by copying the following command:</p></p>

<p><i>&ldquo;spell_check&rdquo;: true,</i></p>

<h3>CSS Sorting</h3>




<p>Another nice to know feature in Sublime is sorting CSS stylesheets.  This can come in handy when you have long selector statements, as it is much easier to read and find the selector you are looking for when it is alphabetized.  Here is an example of before and after snapshots:</p>


<p><b>Before:</b><br><img src="../images/png_before.png"><br><br>
<b>After: </b><br><img src="../images/png_after.png"></p>

<h3>Switching Tabs</h3>


<p>When working on projects with many directories and files, like a Rails app, it sometimes is hard to navigate between each file.  However, there are some helpful commands that allow for easier navigation:</p>

<ul>
  <li>Command T- Selects all tabs that are currently open and allows searching through each tab</li>
  <li>Command + Shift + [ - Will bring you to the previous tab</li>
  <li>Command + Shift + }- Will bring you to the next tab</li>
</ul>


<p><br></p>

<h3>Cross-file editing</h3>


<p>Lets say you want to change a variable in a project, but this variable is referenced in several files in several instances.  This is where cross-file editing in Sublime can be very useful.  If you hit Command + Shift + F in Sublime, you are able to find all instances of the variable.  In the &ldquo;Where&rdquo; section, you would classify the folders, files, and filters you would like to apply your to your replace function.  Lastly, you can replace with the updated variable.  Here is a snapshot of how this would look:</p>

<p><br><img src="../images/cross-file.png"><br></p>

<p>In conclusion, I hope this was a helpful overview of some neat Sublime shorcuts, tips, and packages.  I will leave you with one more tool, <a href="https://github.com/titoBouzout/SideBarEnhancements/tree/st3">SideBar Enhancements</a>, which will also improve your workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks, Procs, and Lambdas... oh my!]]></title>
    <link href="http://mbukantz.github.io/blog/2015/10/25/blocksprocsandlamdas/"/>
    <updated>2015-10-25T16:01:21-04:00</updated>
    <id>http://mbukantz.github.io/blog/2015/10/25/blocksprocsandlamdas</id>
    <content type="html"><![CDATA[<p>Before I enrolled in the Flatiron School, my introduction to programming was through websites like Codecademy and Ruby Monk.  I was doing whatever I could to scrape the surface of coding while trying to entertain myself through the endless boredom of my job.  Two of the topics that were heavily reinforced on Ruby Monk were Procs and Lambdas.  While I found traditional blocks to be intuitive and straightforward, I found Procs and Lambdas to be confusing and abstract.  I was surprised to find out through our first four weeks at the Flatiron School that neither were mentioned in detail.  I did see a few Procs in different rspec tests, but it was not imperative to understand the inner workings of them.</p>




<p>With four weeks of experience under my belt, I wanted to go back and investigate blocks, Procs, and Lambdas, three <em>'closures'</em> in Ruby.</p>


<p></p>

<h3>Procs as Objects versus Blocks</h3>




<p>While blocks are syntactically straightforward, they sometimes are guilty of violating DRY (Don't Repeat Yourself!).  This is where Procs come into the picture.  Short for Procedures, a Proc is a reusable block.  In addition, a Proc is an object, therefore it can be saved as a variable.  To make this as simple as possible, a block is technically a Proc that cannot be saved or reused.  A block is a stripped-down and temporary version of a Proc.  Let's take a look at an example of how a Proc can behave:</p>


<p><img src="../images/Proc_screenshot.png"></p>

<p>In the screenshot above, we are given an array.  Next, we set a variable proc equal to a new Proc <b>object</b> that passes a block that will multiply x by 2.  After setting the proc variable to the object, we map the array to the proc.  The output, as we would expect, is an array of x*2 values.</p>




<p>Procs can also be "called" on with arguments from the block.  Here is a snapshot of what I mean: </p>


<p><img src="../images/Proc_call.png"></p>

<p>So, what would be an example of when you would need to use a Proc?  This would usually occur when you need to call back multiple values within a method.  This is best demonstrated in another example.  Below, there is a method call_twice that takes an argument of a hash of "procs".  First, we call the :first_key('s) value of the procs hash. Next we puts out "sunk your".  Last, we call the :last_key('s) value of the procs hash.  When we pass a hash with Proc values into the call_twice method, we get the output we desire:</p>


<p><img src="../images/Battleship.png"></p>

<p>To summarize when to use Procs over blocks, there are two main reasons:</p>




<ol>
  <li>You want to reuse a block of code multiple times.</li>
  <li>The method that you are in will have more than one call back.</li>
</ol>




<h3>Procs versus Lambdas</h3>




<p>Lastly, I wanted to touch on the topic of Lambdas.  On the surface, Lamdas appear to behave identically to Procs.  In fact, Lambdas are members of the Proc class.  However, there are two subtle differences.</p>




<ol>
  <li>Lambdas check the number of arguments, while Procs do not.  In the example below, we have set lam equal to a Lambda that puts out the argument passed to it.  When we call the Lambda with one argument, it appropriately outputs the value.  However, when we call the Lambda with 0 or 3 arguments, the Lambda errors out.  This is not demonstrated by Procs, which do not care if they are passed the wrong number of arguments.</li><br>

  <img src="../images/lambda_args.png">

  <img src="../images/proc_args.png"><br><br>

  <li>Lambdas and Procs treat the 'return' keyword differently.  When the 'return' keyword is inside of a Lambda, it will trigger the code right outside of the Lambda code.  When the 'return' keyword is inside of a proc, it triggers the code outside of the <b>method</b>.  Here is an example of the difference:</li>
</ol>


<p><img src="../images/lambdaprocreturn.png"></p>

<p>In this post, we have taken a look at Procs versus blocks and Procs versus Lambdas.  Procs are used instead of Blocks when you want to reuse a portion of code or your method will have more than one call back value.  Lambdas are the same as Procs except for two subtle differences discussed above.  I hope you now have some <em>'closure'</em>.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://mbukantz.github.io/blog/2015/09/28/my-first-post-on-octopress/"/>
    <updated>2015-09-28T22:28:06-04:00</updated>
    <id>http://mbukantz.github.io/blog/2015/09/28/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello, World.  Testing&rdquo;</p>
]]></content>
  </entry>
  
</feed>
